using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace API.Migrations
{
    public partial class FirstMigration : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PasswordHash = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    PasswordSalt = table.Column<byte[]>(type: "varbinary(max)", nullable: true),
                    DateOfBirth = table.Column<DateTime>(type: "datetime2", nullable: false),
                    KnownAs = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Created = table.Column<DateTime>(type: "datetime2", nullable: false),
                    LastActive = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Gender = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Introduction = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LookingFor = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Interests = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    City = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Country = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Photos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Url = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    IsMain = table.Column<bool>(type: "bit", nullable: false),
                    PublicId = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    AppUserId = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Photos", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Photos_Users_AppUserId",
                        column: x => x.AppUserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.InsertData(
                table: "Users",
                columns: new[] { "Id", "City", "Country", "Created", "DateOfBirth", "Gender", "Interests", "Introduction", "KnownAs", "LastActive", "LookingFor", "PasswordHash", "PasswordSalt", "UserName" },
                values: new object[,]
                {
                    { 1, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 581, DateTimeKind.Local).AddTicks(1875), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 583, DateTimeKind.Local).AddTicks(1655), null, new byte[] { 61, 70, 155, 222, 239, 13, 54, 244, 63, 222, 8, 85, 94, 32, 53, 12, 145, 246, 199, 196, 145, 145, 222, 217, 188, 251, 170, 74, 91, 222, 203, 28, 230, 28, 82, 234, 86, 139, 77, 27, 110, 131, 157, 133, 111, 88, 173, 31, 47, 174, 138, 17, 209, 187, 78, 126, 1, 161, 51, 80, 116, 22, 111, 141 }, new byte[] { 222, 212, 200, 212, 166, 150, 84, 104, 193, 224, 143, 130, 27, 173, 254, 223, 80, 81, 57, 59, 64, 131, 107, 100, 186, 79, 170, 67, 223, 31, 35, 124, 147, 59, 202, 103, 161, 35, 203, 3, 19, 95, 185, 73, 234, 45, 149, 49, 144, 69, 204, 94, 224, 160, 148, 121, 34, 8, 201, 84, 211, 15, 180, 62, 182, 6, 145, 235, 84, 8, 245, 214, 223, 121, 194, 232, 150, 48, 99, 173, 71, 134, 74, 202, 167, 46, 80, 225, 29, 199, 33, 192, 61, 238, 18, 111, 70, 128, 252, 92, 37, 134, 155, 76, 61, 19, 12, 224, 79, 49, 218, 21, 131, 8, 71, 47, 100, 230, 225, 44, 108, 86, 163, 10, 83, 63, 171, 154 }, "lisa" },
                    { 2, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(490), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(504), null, new byte[] { 106, 87, 249, 157, 205, 67, 34, 223, 114, 33, 5, 100, 244, 34, 117, 210, 75, 107, 71, 34, 7, 121, 74, 1, 208, 151, 0, 36, 245, 201, 79, 173, 160, 79, 139, 192, 199, 61, 30, 198, 66, 184, 150, 23, 73, 196, 185, 32, 22, 132, 19, 86, 63, 182, 88, 234, 180, 195, 153, 54, 247, 77, 59, 248 }, new byte[] { 23, 122, 43, 188, 25, 218, 240, 152, 69, 112, 224, 46, 249, 81, 119, 67, 215, 162, 240, 252, 6, 45, 111, 62, 81, 159, 181, 19, 207, 45, 87, 35, 132, 206, 193, 13, 113, 134, 71, 181, 142, 82, 29, 107, 200, 100, 181, 79, 209, 142, 94, 116, 96, 26, 250, 209, 49, 141, 123, 177, 82, 119, 51, 22, 226, 107, 171, 132, 254, 249, 201, 155, 186, 138, 254, 99, 215, 248, 254, 168, 130, 48, 0, 131, 20, 143, 97, 148, 114, 7, 84, 244, 209, 139, 163, 93, 54, 76, 142, 199, 236, 10, 93, 211, 206, 6, 142, 165, 206, 211, 59, 180, 120, 124, 98, 167, 162, 14, 23, 253, 229, 174, 95, 79, 13, 157, 237, 44 }, "karen" },
                    { 3, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(629), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(632), null, new byte[] { 79, 190, 202, 161, 32, 34, 154, 27, 156, 56, 75, 101, 216, 142, 36, 51, 124, 148, 118, 220, 250, 6, 27, 51, 252, 180, 91, 174, 208, 121, 222, 233, 154, 124, 177, 150, 133, 227, 112, 45, 215, 182, 231, 169, 238, 55, 4, 86, 150, 220, 154, 63, 32, 63, 225, 100, 86, 20, 27, 163, 50, 4, 239, 94 }, new byte[] { 176, 179, 151, 109, 255, 106, 247, 93, 152, 114, 158, 138, 218, 32, 216, 29, 97, 165, 30, 118, 106, 36, 218, 57, 139, 69, 3, 195, 150, 235, 232, 70, 132, 186, 174, 2, 158, 28, 232, 171, 11, 125, 182, 253, 40, 125, 4, 202, 129, 107, 58, 11, 32, 120, 97, 71, 173, 45, 159, 87, 62, 217, 212, 114, 252, 89, 180, 32, 138, 53, 219, 36, 211, 9, 71, 213, 196, 83, 158, 111, 242, 156, 36, 175, 242, 169, 117, 139, 235, 240, 243, 132, 124, 75, 90, 162, 215, 95, 212, 98, 90, 229, 223, 109, 192, 216, 63, 123, 119, 82, 38, 168, 108, 22, 61, 25, 94, 150, 109, 202, 182, 236, 149, 89, 179, 10, 212, 35 }, "margo" },
                    { 4, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(670), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(673), null, new byte[] { 69, 9, 155, 71, 97, 48, 156, 21, 106, 191, 33, 61, 160, 204, 113, 71, 133, 120, 125, 41, 177, 195, 157, 29, 140, 171, 68, 141, 237, 162, 209, 177, 160, 26, 237, 125, 248, 13, 251, 54, 81, 38, 41, 239, 55, 53, 255, 120, 112, 16, 175, 54, 156, 60, 178, 114, 228, 209, 15, 160, 202, 202, 52, 121 }, new byte[] { 86, 110, 250, 29, 103, 187, 3, 250, 226, 234, 35, 115, 62, 116, 71, 242, 87, 89, 60, 147, 58, 103, 117, 16, 111, 58, 121, 84, 60, 47, 174, 106, 123, 126, 121, 61, 89, 204, 83, 92, 209, 14, 174, 195, 149, 205, 140, 134, 90, 126, 9, 137, 150, 136, 203, 215, 22, 223, 241, 53, 62, 117, 87, 68, 125, 124, 115, 25, 136, 98, 119, 13, 234, 70, 198, 49, 0, 103, 158, 73, 95, 107, 85, 134, 74, 77, 119, 51, 85, 160, 187, 7, 84, 5, 79, 232, 194, 153, 233, 222, 198, 177, 117, 193, 83, 60, 237, 252, 199, 178, 142, 142, 10, 141, 175, 3, 153, 60, 155, 91, 55, 153, 184, 147, 252, 183, 105, 53 }, "lois" },
                    { 5, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(708), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(710), null, new byte[] { 33, 124, 255, 75, 142, 10, 42, 13, 207, 72, 112, 211, 251, 178, 129, 171, 52, 185, 196, 244, 118, 45, 104, 60, 186, 159, 147, 77, 67, 138, 96, 162, 64, 165, 243, 85, 186, 173, 235, 117, 143, 42, 218, 122, 82, 81, 107, 146, 25, 47, 182, 250, 111, 38, 0, 36, 167, 100, 144, 99, 83, 68, 81, 8 }, new byte[] { 208, 207, 81, 140, 183, 84, 228, 41, 64, 120, 139, 132, 219, 44, 9, 86, 91, 179, 55, 138, 23, 102, 197, 103, 167, 108, 74, 40, 237, 178, 18, 60, 126, 114, 37, 234, 6, 64, 97, 251, 24, 162, 228, 97, 64, 61, 172, 132, 116, 62, 195, 212, 99, 38, 155, 10, 33, 162, 51, 214, 251, 234, 4, 1, 45, 183, 193, 31, 90, 176, 153, 162, 194, 18, 252, 98, 179, 113, 73, 204, 172, 225, 251, 112, 14, 97, 105, 226, 0, 54, 8, 29, 37, 118, 49, 33, 77, 38, 190, 62, 94, 197, 165, 105, 156, 49, 16, 242, 70, 11, 132, 108, 145, 129, 9, 24, 120, 63, 37, 157, 70, 33, 181, 18, 23, 105, 142, 86 }, "ruthie" },
                    { 6, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(745), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(748), null, new byte[] { 121, 98, 39, 122, 225, 104, 44, 192, 45, 15, 144, 18, 158, 56, 244, 190, 89, 232, 114, 250, 119, 56, 215, 156, 152, 2, 174, 231, 206, 116, 131, 216, 79, 90, 217, 139, 3, 194, 38, 77, 195, 192, 5, 128, 28, 0, 37, 194, 181, 48, 232, 74, 210, 1, 9, 25, 24, 45, 147, 102, 98, 221, 192, 246 }, new byte[] { 18, 99, 18, 37, 19, 198, 76, 83, 136, 251, 43, 77, 76, 45, 201, 237, 31, 239, 106, 76, 94, 67, 203, 201, 75, 196, 10, 63, 67, 209, 86, 39, 97, 45, 90, 169, 246, 133, 99, 154, 105, 83, 234, 224, 143, 246, 239, 71, 107, 239, 197, 195, 105, 254, 233, 112, 39, 221, 61, 154, 20, 165, 82, 159, 191, 81, 49, 157, 72, 91, 139, 69, 202, 241, 204, 72, 66, 195, 94, 211, 14, 77, 70, 28, 52, 143, 231, 254, 42, 246, 95, 75, 8, 119, 158, 201, 219, 69, 210, 88, 223, 140, 201, 151, 56, 142, 13, 78, 245, 16, 241, 192, 156, 93, 95, 118, 109, 67, 8, 168, 104, 116, 14, 78, 155, 207, 93, 120 }, "todd" },
                    { 7, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(873), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(875), null, new byte[] { 33, 168, 216, 230, 210, 39, 252, 246, 172, 164, 199, 89, 105, 12, 240, 132, 245, 243, 211, 250, 229, 13, 26, 73, 253, 111, 208, 228, 160, 201, 76, 233, 208, 230, 154, 114, 78, 50, 26, 67, 125, 35, 132, 14, 41, 190, 24, 39, 17, 146, 138, 110, 7, 247, 164, 200, 17, 82, 52, 2, 204, 155, 109, 242 }, new byte[] { 178, 88, 102, 235, 209, 79, 190, 86, 166, 240, 128, 251, 141, 131, 229, 13, 87, 210, 14, 19, 120, 19, 181, 226, 9, 231, 188, 38, 126, 71, 215, 69, 230, 93, 133, 27, 140, 239, 151, 22, 220, 214, 78, 246, 7, 220, 54, 104, 254, 117, 122, 190, 52, 15, 167, 206, 129, 169, 161, 68, 86, 119, 21, 27, 226, 67, 3, 99, 222, 196, 19, 114, 236, 233, 40, 254, 60, 80, 76, 69, 253, 150, 63, 140, 113, 250, 19, 52, 147, 39, 18, 82, 249, 85, 27, 254, 19, 173, 238, 186, 172, 151, 255, 103, 195, 157, 154, 60, 60, 239, 115, 102, 236, 43, 138, 116, 173, 63, 187, 161, 187, 173, 47, 80, 17, 213, 150, 252 }, "porter" },
                    { 8, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(912), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(914), null, new byte[] { 185, 86, 174, 155, 239, 28, 166, 93, 37, 190, 3, 224, 78, 247, 249, 35, 120, 26, 97, 3, 23, 93, 10, 117, 87, 187, 234, 201, 47, 26, 187, 64, 204, 230, 181, 177, 58, 132, 210, 60, 37, 201, 195, 174, 40, 92, 177, 91, 26, 176, 69, 179, 22, 78, 185, 111, 124, 200, 189, 202, 5, 121, 64, 206 }, new byte[] { 86, 232, 156, 198, 161, 192, 44, 238, 75, 48, 63, 206, 239, 147, 157, 198, 112, 126, 156, 236, 160, 230, 15, 2, 167, 222, 154, 238, 126, 64, 255, 177, 5, 115, 79, 105, 79, 168, 22, 18, 214, 198, 201, 1, 129, 35, 150, 125, 242, 145, 210, 135, 45, 107, 211, 180, 50, 240, 130, 200, 171, 117, 32, 47, 230, 130, 7, 35, 251, 106, 99, 137, 172, 190, 91, 153, 233, 160, 198, 189, 228, 8, 214, 151, 85, 118, 65, 34, 42, 49, 152, 234, 43, 116, 47, 161, 22, 216, 23, 186, 224, 81, 182, 158, 116, 231, 31, 248, 219, 211, 146, 252, 155, 223, 237, 134, 222, 219, 75, 153, 22, 200, 245, 94, 172, 194, 186, 28 }, "mayo" },
                    { 9, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(950), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(952), null, new byte[] { 203, 163, 196, 30, 243, 201, 175, 144, 231, 98, 113, 100, 90, 248, 242, 47, 192, 8, 62, 79, 146, 250, 3, 99, 89, 100, 99, 98, 151, 180, 170, 76, 47, 137, 131, 4, 55, 217, 149, 216, 95, 58, 99, 38, 87, 19, 80, 37, 249, 99, 217, 99, 68, 139, 151, 243, 172, 74, 34, 122, 120, 163, 107, 72 }, new byte[] { 119, 45, 154, 99, 155, 233, 185, 60, 61, 162, 229, 41, 181, 200, 187, 136, 51, 188, 88, 4, 110, 212, 71, 52, 135, 9, 28, 13, 248, 201, 12, 85, 110, 4, 181, 117, 54, 169, 116, 232, 218, 116, 11, 97, 151, 249, 34, 128, 177, 209, 1, 178, 128, 88, 149, 198, 80, 111, 176, 178, 138, 92, 111, 94, 108, 230, 60, 160, 211, 250, 75, 110, 12, 84, 221, 151, 127, 44, 127, 125, 221, 47, 150, 125, 136, 31, 11, 91, 67, 219, 158, 231, 88, 24, 36, 38, 111, 221, 76, 96, 218, 206, 247, 152, 137, 205, 142, 219, 236, 129, 228, 116, 48, 33, 248, 58, 54, 127, 23, 5, 102, 92, 178, 62, 184, 103, 181, 54 }, "skinner" },
                    { 10, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(988), new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), null, null, null, null, new DateTime(2022, 12, 4, 20, 30, 7, 585, DateTimeKind.Local).AddTicks(991), null, new byte[] { 197, 227, 150, 82, 24, 95, 46, 241, 203, 224, 133, 166, 150, 170, 5, 34, 102, 133, 40, 178, 129, 89, 3, 220, 240, 53, 176, 183, 80, 155, 191, 152, 31, 106, 126, 225, 143, 15, 204, 151, 40, 46, 245, 146, 196, 13, 179, 105, 98, 64, 162, 113, 0, 221, 168, 157, 53, 80, 111, 145, 123, 48, 90, 222 }, new byte[] { 41, 178, 246, 19, 94, 92, 232, 107, 119, 103, 217, 192, 130, 59, 34, 142, 142, 23, 44, 117, 14, 146, 233, 92, 214, 206, 2, 51, 179, 34, 73, 167, 99, 188, 216, 121, 107, 119, 244, 39, 21, 194, 133, 76, 42, 248, 0, 222, 125, 7, 185, 181, 60, 76, 147, 67, 84, 227, 21, 20, 121, 104, 142, 106, 102, 193, 97, 183, 25, 23, 150, 60, 49, 20, 0, 195, 32, 160, 38, 2, 54, 229, 175, 107, 58, 194, 229, 31, 50, 224, 136, 221, 25, 161, 221, 199, 130, 76, 127, 20, 77, 22, 201, 92, 200, 154, 181, 92, 43, 100, 188, 69, 42, 177, 79, 142, 84, 243, 97, 29, 218, 206, 16, 54, 52, 92, 123, 157 }, "david" }
                });

            migrationBuilder.CreateIndex(
                name: "IX_Photos_AppUserId",
                table: "Photos",
                column: "AppUserId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Photos");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
