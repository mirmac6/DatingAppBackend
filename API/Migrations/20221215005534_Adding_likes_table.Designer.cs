// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221215005534_Adding_likes_table")]
    partial class Adding_likes_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interests")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KnownAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LookingFor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 196, DateTimeKind.Local).AddTicks(3830),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 198, DateTimeKind.Local).AddTicks(4228),
                            PasswordHash = new byte[] { 244, 208, 201, 31, 138, 42, 211, 201, 241, 204, 141, 230, 14, 218, 36, 71, 1, 152, 139, 206, 90, 250, 77, 162, 185, 184, 219, 105, 53, 188, 14, 148, 88, 124, 12, 245, 21, 73, 233, 133, 12, 18, 86, 92, 189, 227, 165, 170, 197, 227, 199, 166, 114, 55, 89, 18, 193, 154, 51, 210, 232, 210, 234, 117 },
                            PasswordSalt = new byte[] { 217, 99, 21, 89, 16, 73, 255, 150, 12, 86, 243, 59, 219, 45, 231, 215, 214, 217, 84, 162, 116, 15, 0, 37, 75, 233, 197, 113, 217, 55, 95, 93, 143, 130, 178, 151, 7, 233, 116, 247, 250, 120, 215, 140, 191, 179, 243, 28, 235, 239, 111, 246, 146, 237, 95, 9, 104, 115, 229, 254, 193, 62, 68, 107, 26, 145, 19, 165, 254, 231, 237, 171, 2, 118, 170, 69, 160, 160, 89, 149, 117, 107, 66, 30, 0, 106, 221, 76, 25, 105, 154, 70, 72, 161, 1, 89, 1, 12, 90, 105, 125, 34, 201, 113, 7, 127, 241, 113, 202, 175, 3, 164, 59, 105, 49, 7, 84, 61, 19, 115, 216, 243, 164, 215, 2, 77, 131, 72 },
                            UserName = "lisa"
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(1915),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(1928),
                            PasswordHash = new byte[] { 186, 49, 32, 14, 105, 18, 180, 121, 36, 187, 18, 116, 199, 28, 159, 26, 244, 234, 112, 43, 180, 244, 113, 174, 67, 187, 137, 172, 110, 35, 142, 87, 25, 86, 72, 75, 120, 213, 23, 243, 134, 232, 162, 148, 187, 232, 212, 158, 39, 6, 101, 191, 71, 134, 42, 215, 38, 99, 136, 32, 90, 150, 127, 77 },
                            PasswordSalt = new byte[] { 211, 124, 19, 183, 146, 153, 63, 82, 247, 210, 49, 111, 80, 67, 21, 61, 113, 63, 146, 205, 98, 116, 210, 31, 148, 27, 195, 117, 116, 164, 75, 211, 238, 138, 105, 56, 52, 102, 157, 127, 152, 54, 133, 40, 4, 4, 94, 78, 42, 167, 155, 137, 210, 184, 42, 229, 219, 113, 62, 189, 174, 63, 72, 197, 84, 187, 178, 44, 79, 228, 199, 124, 248, 219, 49, 247, 44, 62, 72, 82, 162, 34, 29, 181, 121, 131, 156, 129, 240, 236, 14, 171, 64, 167, 87, 68, 217, 207, 144, 165, 237, 152, 85, 120, 2, 46, 14, 132, 31, 137, 162, 170, 218, 5, 173, 19, 109, 22, 30, 155, 23, 229, 135, 16, 255, 207, 208, 241 },
                            UserName = "karen"
                        },
                        new
                        {
                            Id = 3,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2026),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2029),
                            PasswordHash = new byte[] { 137, 245, 53, 140, 166, 29, 222, 140, 136, 70, 202, 112, 4, 150, 119, 217, 120, 32, 40, 106, 158, 165, 6, 114, 194, 217, 239, 148, 132, 17, 150, 61, 40, 36, 170, 37, 102, 136, 19, 21, 91, 80, 82, 246, 125, 69, 211, 132, 91, 253, 167, 236, 160, 16, 19, 149, 188, 207, 82, 105, 187, 233, 38, 153 },
                            PasswordSalt = new byte[] { 154, 150, 91, 62, 145, 19, 75, 202, 219, 69, 80, 143, 92, 126, 129, 150, 166, 211, 69, 59, 78, 102, 231, 189, 36, 88, 153, 103, 172, 62, 208, 242, 254, 189, 71, 33, 149, 89, 79, 26, 117, 40, 108, 182, 114, 19, 224, 1, 18, 150, 227, 63, 136, 234, 122, 220, 89, 40, 212, 161, 7, 238, 203, 160, 160, 243, 214, 19, 91, 185, 220, 218, 97, 11, 18, 197, 59, 41, 3, 217, 23, 65, 108, 143, 126, 19, 159, 5, 137, 108, 102, 197, 238, 48, 99, 104, 70, 234, 6, 82, 26, 93, 85, 93, 246, 113, 49, 136, 35, 47, 141, 170, 250, 206, 233, 1, 3, 114, 189, 137, 121, 117, 204, 3, 106, 92, 65, 187 },
                            UserName = "margo"
                        },
                        new
                        {
                            Id = 4,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2157),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2160),
                            PasswordHash = new byte[] { 75, 188, 30, 28, 81, 95, 249, 173, 159, 0, 133, 54, 68, 28, 124, 26, 71, 186, 169, 240, 215, 42, 212, 246, 135, 201, 198, 123, 181, 86, 247, 156, 203, 139, 128, 127, 254, 51, 252, 155, 161, 170, 249, 198, 209, 35, 182, 160, 209, 223, 102, 86, 46, 171, 216, 248, 93, 221, 92, 211, 209, 249, 69, 20 },
                            PasswordSalt = new byte[] { 34, 18, 107, 136, 253, 228, 17, 49, 97, 121, 54, 75, 247, 222, 201, 133, 2, 156, 174, 239, 59, 92, 187, 216, 182, 177, 248, 118, 95, 240, 11, 94, 188, 37, 77, 207, 226, 186, 99, 181, 177, 18, 75, 166, 174, 171, 74, 243, 49, 221, 138, 154, 112, 191, 99, 121, 251, 126, 220, 133, 187, 206, 62, 100, 226, 70, 52, 47, 91, 133, 198, 233, 118, 124, 233, 138, 84, 11, 6, 203, 196, 139, 124, 234, 124, 158, 128, 63, 41, 146, 36, 149, 220, 164, 44, 11, 100, 183, 196, 116, 236, 26, 197, 149, 239, 94, 228, 164, 96, 80, 206, 251, 106, 145, 197, 150, 199, 86, 243, 163, 232, 199, 160, 107, 9, 70, 253, 198 },
                            UserName = "lois"
                        },
                        new
                        {
                            Id = 5,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2287),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2289),
                            PasswordHash = new byte[] { 142, 2, 133, 248, 225, 173, 132, 13, 160, 10, 18, 111, 11, 168, 30, 121, 197, 74, 64, 31, 119, 114, 5, 46, 170, 110, 214, 176, 131, 24, 111, 173, 8, 91, 99, 93, 148, 189, 174, 156, 230, 181, 129, 87, 125, 240, 164, 36, 27, 213, 47, 73, 187, 255, 91, 187, 105, 100, 115, 131, 179, 238, 164, 247 },
                            PasswordSalt = new byte[] { 93, 134, 60, 4, 228, 39, 166, 183, 114, 146, 169, 134, 252, 47, 85, 190, 97, 24, 153, 158, 118, 65, 95, 235, 206, 222, 8, 133, 149, 113, 162, 43, 121, 201, 104, 201, 248, 49, 236, 223, 53, 61, 27, 196, 152, 229, 79, 253, 30, 37, 216, 78, 223, 76, 119, 17, 59, 217, 132, 121, 178, 53, 72, 152, 233, 7, 175, 41, 0, 200, 116, 133, 151, 216, 184, 52, 197, 233, 17, 129, 126, 105, 72, 47, 210, 59, 94, 175, 90, 72, 141, 205, 250, 215, 112, 163, 180, 79, 217, 86, 65, 96, 215, 212, 249, 207, 147, 125, 249, 96, 111, 211, 127, 250, 134, 5, 197, 216, 221, 118, 121, 206, 126, 212, 82, 12, 172, 87 },
                            UserName = "ruthie"
                        },
                        new
                        {
                            Id = 6,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2326),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2329),
                            PasswordHash = new byte[] { 179, 221, 25, 137, 252, 198, 44, 44, 103, 24, 255, 122, 130, 145, 224, 102, 83, 199, 208, 94, 140, 22, 240, 41, 67, 86, 14, 54, 35, 118, 215, 184, 56, 210, 131, 95, 59, 226, 103, 202, 30, 203, 48, 191, 122, 137, 87, 24, 74, 154, 208, 12, 165, 182, 229, 149, 221, 169, 155, 120, 70, 114, 111, 204 },
                            PasswordSalt = new byte[] { 44, 150, 240, 216, 239, 199, 7, 151, 23, 158, 218, 33, 145, 92, 235, 2, 222, 106, 215, 123, 215, 163, 32, 198, 138, 76, 114, 168, 152, 104, 179, 215, 131, 62, 244, 208, 157, 172, 14, 5, 212, 224, 140, 111, 114, 35, 160, 159, 174, 179, 170, 45, 90, 25, 78, 222, 218, 64, 189, 81, 35, 39, 123, 29, 77, 118, 170, 245, 36, 181, 180, 232, 41, 128, 12, 161, 218, 247, 206, 34, 18, 224, 245, 198, 186, 8, 155, 128, 162, 20, 117, 22, 136, 235, 177, 209, 139, 210, 196, 232, 32, 72, 125, 139, 254, 110, 167, 185, 203, 53, 130, 107, 13, 222, 29, 129, 41, 181, 35, 236, 83, 107, 254, 78, 137, 213, 94, 89 },
                            UserName = "todd"
                        },
                        new
                        {
                            Id = 7,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2365),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2368),
                            PasswordHash = new byte[] { 221, 50, 101, 83, 83, 45, 220, 243, 162, 26, 164, 132, 51, 122, 131, 154, 234, 177, 35, 78, 16, 223, 199, 133, 111, 186, 177, 244, 101, 167, 69, 149, 20, 15, 122, 22, 46, 237, 147, 183, 153, 31, 179, 93, 155, 216, 180, 130, 94, 69, 63, 44, 140, 189, 84, 239, 132, 99, 248, 9, 203, 0, 135, 101 },
                            PasswordSalt = new byte[] { 235, 212, 223, 126, 105, 136, 165, 49, 215, 146, 61, 137, 29, 79, 106, 92, 190, 253, 66, 243, 53, 195, 141, 176, 223, 147, 71, 15, 252, 110, 231, 46, 167, 88, 98, 6, 64, 37, 177, 229, 13, 136, 2, 96, 68, 154, 193, 154, 27, 223, 2, 134, 76, 160, 54, 48, 141, 244, 141, 178, 133, 172, 198, 51, 25, 147, 46, 246, 158, 61, 232, 10, 191, 17, 185, 87, 211, 233, 111, 126, 0, 140, 223, 75, 73, 254, 161, 92, 185, 11, 123, 46, 65, 220, 232, 255, 74, 163, 245, 217, 39, 187, 149, 182, 145, 149, 77, 30, 197, 93, 134, 210, 208, 79, 50, 44, 139, 159, 225, 60, 91, 151, 95, 126, 115, 57, 30, 109 },
                            UserName = "porter"
                        },
                        new
                        {
                            Id = 8,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2423),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2426),
                            PasswordHash = new byte[] { 116, 154, 229, 175, 186, 194, 35, 79, 13, 249, 222, 101, 254, 203, 117, 252, 227, 200, 19, 84, 165, 101, 240, 200, 157, 108, 108, 90, 129, 104, 0, 42, 211, 224, 216, 109, 148, 157, 7, 72, 236, 155, 242, 149, 73, 59, 186, 136, 174, 132, 102, 68, 241, 51, 4, 19, 171, 67, 199, 203, 157, 191, 134, 241 },
                            PasswordSalt = new byte[] { 114, 138, 68, 50, 39, 144, 86, 93, 71, 136, 52, 159, 48, 96, 34, 248, 191, 85, 205, 89, 233, 10, 82, 14, 229, 1, 130, 195, 64, 24, 9, 68, 182, 188, 51, 196, 193, 71, 117, 121, 106, 151, 39, 17, 93, 16, 92, 139, 93, 119, 86, 227, 44, 220, 168, 245, 101, 69, 82, 54, 149, 82, 13, 2, 181, 53, 227, 162, 87, 97, 235, 11, 70, 132, 165, 253, 215, 19, 169, 149, 130, 249, 70, 203, 26, 106, 7, 110, 9, 15, 49, 157, 17, 113, 244, 145, 30, 13, 214, 34, 175, 41, 76, 218, 172, 162, 157, 21, 91, 191, 117, 199, 136, 84, 244, 95, 237, 158, 150, 160, 54, 87, 174, 208, 152, 31, 242, 48 },
                            UserName = "mayo"
                        },
                        new
                        {
                            Id = 9,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2462),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2464),
                            PasswordHash = new byte[] { 6, 77, 166, 111, 188, 77, 148, 13, 178, 228, 92, 95, 192, 198, 168, 12, 163, 126, 34, 129, 11, 206, 110, 179, 245, 211, 254, 240, 143, 21, 127, 70, 99, 251, 95, 181, 159, 156, 172, 218, 76, 211, 23, 197, 95, 42, 36, 238, 115, 247, 82, 44, 25, 159, 196, 25, 46, 18, 35, 92, 130, 37, 217, 219 },
                            PasswordSalt = new byte[] { 186, 128, 160, 190, 214, 30, 137, 115, 225, 81, 1, 201, 203, 0, 69, 207, 44, 139, 168, 222, 12, 178, 46, 159, 196, 26, 253, 179, 9, 160, 60, 140, 239, 30, 223, 72, 209, 149, 243, 218, 197, 238, 17, 89, 107, 91, 231, 126, 197, 37, 104, 191, 67, 67, 72, 164, 213, 161, 203, 28, 75, 236, 253, 201, 40, 37, 5, 16, 82, 142, 192, 215, 43, 178, 160, 49, 225, 39, 153, 1, 38, 207, 110, 236, 52, 111, 210, 159, 30, 216, 132, 245, 237, 228, 8, 64, 140, 228, 251, 125, 229, 222, 196, 232, 236, 101, 88, 117, 63, 244, 15, 176, 95, 186, 158, 192, 20, 67, 221, 219, 35, 80, 127, 106, 3, 56, 202, 28 },
                            UserName = "skinner"
                        },
                        new
                        {
                            Id = 10,
                            Created = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2499),
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastActive = new DateTime(2022, 12, 15, 1, 55, 34, 200, DateTimeKind.Local).AddTicks(2502),
                            PasswordHash = new byte[] { 246, 54, 101, 254, 187, 79, 211, 229, 250, 253, 79, 67, 226, 119, 239, 30, 233, 215, 212, 236, 235, 13, 225, 248, 53, 36, 219, 79, 227, 82, 221, 211, 105, 174, 6, 91, 125, 203, 24, 145, 22, 138, 45, 90, 72, 134, 109, 34, 30, 90, 244, 54, 152, 250, 103, 150, 210, 110, 159, 240, 154, 157, 78, 155 },
                            PasswordSalt = new byte[] { 196, 134, 154, 150, 42, 82, 193, 116, 202, 63, 177, 76, 139, 29, 172, 73, 211, 11, 115, 17, 43, 48, 145, 21, 148, 231, 235, 28, 115, 100, 190, 193, 82, 72, 61, 189, 38, 178, 161, 168, 199, 90, 85, 220, 208, 200, 28, 215, 144, 97, 3, 111, 38, 158, 100, 219, 233, 10, 43, 10, 186, 158, 136, 7, 250, 146, 130, 154, 234, 208, 79, 45, 110, 140, 100, 80, 170, 204, 229, 31, 205, 243, 122, 217, 135, 18, 59, 185, 164, 91, 103, 77, 46, 102, 78, 215, 252, 67, 151, 108, 186, 211, 188, 28, 80, 225, 113, 146, 7, 236, 156, 148, 54, 140, 212, 188, 97, 195, 73, 171, 181, 213, 157, 254, 44, 77, 198, 234 },
                            UserName = "david"
                        });
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("PublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("API.Entities.UserLike", b =>
                {
                    b.Property<int>("SourceUserId")
                        .HasColumnType("int");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("int");

                    b.HasKey("SourceUserId", "TargetUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Entities.UserLike", b =>
                {
                    b.HasOne("API.Entities.AppUser", "SourceUser")
                        .WithMany("LikedUsers")
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.AppUser", "TargetUser")
                        .WithMany("LikedByUsers")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SourceUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("LikedByUsers");

                    b.Navigation("LikedUsers");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
